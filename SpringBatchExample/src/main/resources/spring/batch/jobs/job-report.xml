<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <bean id="report" class="com.mkyong.model.Report" scope="prototype" />
    
     <bean id="CSVjobListener" class="com.mkyong.FileListenerCSV" />
    
	<batch:job id="reportJob">
		<batch:step id="step1">
			<batch:tasklet  >
				<batch:chunk reader="cvsFileItemReader" writer="mysqlItemWriter" 
					commit-interval="2">
					<!-- processor="csvItemProcessor" -->
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		 <batch:listeners>
			<batch:listener ref="CSVjobListener" />
		</batch:listeners> 
		
		
	</batch:job>

<bean id="cvsFileItemReader" class="com.mkyong.FileReaderCSV"  >
</bean>

<bean id="mysqlItemWriter" class="com.mkyong.FileWriterCSV">
		
</bean>

<bean id="csvItemProcessor" class="com.mkyong.FileProcessorCSV">
		
</bean>


	<!-- <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		Read a csv file
		<property name="resource" value="classpath:cvs/NDCDataElements1.csv" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				split it
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="ITEMCODE,NDC11,PROPRIETARYNAME,DOSAGEFORM,MARKETINGCATEGORY,APPNUMORCITATION,PRODUCTTYPE,MARKETSTARTDATE,MARKETENDDATE,BILLINGUNIT" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				    
				    return back to reader, rather than a mapped object.
				    
				    	<bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
				   
				      
					map to an object
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="report" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean> -->

	<!-- <bean id="mysqlItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into RAW_REPORT(ITEMCODE,NDC11,PROPRIETARYNAME,DOSAGEFORM,MARKETINGCATEGORY,APPNUMORCITATION,PRODUCTTYPE,MARKETSTARTDATE,MARKETENDDATE,BILLINGUNIT)
            	 values (:ITEMCODE, :NDC11, :PROPRIETARYNAME, :DOSAGEFORM, :MARKETINGCATEGORY, :APPNUMORCITATION, :PRODUCTTYPE, :MARKETSTARTDATE, :MARKETENDDATE, :BILLINGUNIT)
            ]]>
			</value>
		</property>
		It will take care matching between object property and sql name parameter
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean> -->

</beans>
